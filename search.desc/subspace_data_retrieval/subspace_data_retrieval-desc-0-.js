searchState.loadedDescShard("subspace_data_retrieval", 0, "Fetching data from the archived history of the Subspace …\nFetching objects stored in the archived history of …\nFetching pieces of the archived history of Subspace …\nGetting object pieces from the Subspace Distributed …\nFetching segments of the archived history of Subspace …\nObject fetching errors.\nHash doesn’t match data\nLength prefix is too large error\nThe maximum amount of segment padding.\nThe maximum object length this module can handle.\nNo item in segment at offset\nSupplied piece index is not a source piece\nObject decoding error\nObject fetcher for the Subspace DSN.\nObject is too large error\nPiece getter error\nPiece getter couldn’t find the piece\nSupplied piece offset is too large\nSegment getter error\nObject not found after downloading expected number of …\nUnexpected item in continuing segment at offset\nUnexpected item in first segment at offset\nAssemble the objects in <code>mapping</code> by fetching necessary …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new object fetcher with the given configuration.\nConcurrently downloads the exact pieces in <code>piece_indexes</code>, …\nTrait representing a way to get pieces\nGet piece by index.\nGet pieces with provided indices.\nA default implementation which gets each piece …\nNot enough pieces\nPiece getter error\nSegment decoding error\nSegment getter errors.\nSegment reconstruction error\nConcurrently downloads the pieces for <code>segment_index</code>, and …\nDownloads pieces of the segment such that segment can be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNumber of pieces that were downloaded")